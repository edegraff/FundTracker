@model Common.Models.Report

@{
        ViewBag.Title = "Report";
}

@section scripts {
    <script src="~/Scripts/swfobject.js"></script>
    <script src="~/Scripts/downloadify.min.js"></script>
    @Styles.Render("~/Content/c3.css")
    <script src="/Scripts/d3.min.js" charset="utf-8"></script>
    <script src="/Scripts/c3.min.js"></script>
}

<div id="graph-section" style="display:none;">
    <div id="chart-options" class="highlight-options">
        <label class="left indent-left">Chart Display Type By: </label>
        <button name="value" class="indent-left">Value</button>
        <button name="difference" class="indent-left">Change since Start Date</button>
    </div>
    <br />

    <div id="chart"></div>
    <br />
    <br />
</div>

<div class="hcenter" style="width:156px;">
    <p id="export"></p>
</div>

<table id="fundDataTable" class="table">
    <thead>
        <tr>
            <th>
                Date
            </th>
            @foreach (var item in Model.FundNames)
            {
                <th>
                    @item
                </th>
            }
        </tr>
    </thead>

    <tbody>
        @* Iterate over date range *@
        @{
            for (int i = 0; i < Model.Dates.Count; i++)
            {
                <tr>
                    <td>
                        @Model.Dates[i].Date.Year/@Model.Dates[i].Date.Month/@Model.Dates[i].Date.Day
                    </td>
                    @foreach (List<String> vals in Model.FundsData)
                    {
                    <td>
                        @vals[i]
                    </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

<script>
    /* Create export */
    @{
        string names = "";
        foreach (var item in Model.FundNames)
        {
            names += item + ", ";
        }
        names = names.Substring(0, names.Length - 2);
    }

    // Assemble export data
    var tableData = "Date, @names"+"\n";
    var cols = $('#fundDataTable th').size();
    var $cells = $('#fundDataTable td');
    for (var i = 0; i < $cells.size() ; i++) {
        tableData += $cells[i].innerHTML.trim() + ", ";
        if (i % cols == cols - 1) {
            tableData = tableData.substring(0, tableData.length - 2) + "\n";
        }
    }

    var options = {
        filename: function () {
            var date = new Date();
            date = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
            return 'FundTrackerReport - ' + date + '.csv'; //static file -- you could retrieve from form input box
        },
        data: function () {
            return tableData; //static content -- you could retrieve from form input box
        },
        onComplete: function () {
        },
        onCancel: function () {
        },
        onError: function () {
            alert('Oops, an error has occurred with your download.  Sorry.');
        },
        transparent: false,
        swf: '../Media/downloadify.swf',
        downloadImage: '../Images/download.png',
        width: 156,
        height: 26,
        transparent: true,
        append: false
    }

    Downloadify.create('export', options);


    /* create graph */
    var graphType = "@ViewBag.graph";
    if ("NO_GRAPH" != graphType) {
        // Show graph options
        $('#graph-section').show();

        // Vars that the graph uses
        var cols = [];
        var yLabel;

        // Temp vars
        var i;
        var j;
        var $col;
        var num;

        // Set the titles for the columns (for all types)
        var $headers = $('#fundDataTable th');
        for (i = 0; i < $headers.length; i++) {
            cols[i] = [$headers[i].innerHTML.trim()];
        }
        cols[0] = ['x'];

        // Set the row data (dates) (for all types)
        var $dates = $('#fundDataTable tr>td:first-child');
        for (i = 0; i < $dates.length; i++) {
            cols[0][$dates.length - i] = formatDate($dates[i].innerHTML.trim());
        }

        // Specific Data for each Graph type
        var yLabelValue = "Fund Price ($)";
        var colsValue = [];
        copy2DeepArr(cols, colsValue);
        var yLabelDifference = "Fund Price Change ($)";
        var colsDifference = [];
        copy2DeepArr(cols, colsDifference);

        // Generate all the type specific data
        for (i = 1; i < $headers.length; i++) {
            $col = $('#fundDataTable tr>td:nth-child(' + (i + 1) + ')');

            // VALUE Type
            for (j = 0; j < $col.length; j++) {
                num = $col[$col.length - j - 1].innerHTML.trim();
                if ($.isNumeric(num)) {
                    colsValue[i][j+1] = num;
                } else {
                    colsValue[i][j+1] = null;
                }
            }

            // DIFFERENCE Type
            var first = null;
            for (j = 0; j < $col.length; j++) {
                num = $col[$col.length - j - 1].innerHTML.trim();

                if ($.isNumeric(num)) {
                    if (first == null) {
                        first = num;
                        colsDifference[i][j + 1] = 0;
                    } else {
                        colsDifference[i][j + 1] = Math.round((num - first) * 10000) / 10000;
                    }
                } else {
                    colsDifference[i][j + 1] = null;
                }
            }
        }


        /* generate initial graph to show VALUE Type */
        var chart = c3.generate({
            bindto: '#chart',
            data: {
                x: 'x',
                columns: colsValue,

            },
            axis: {
                x: {
                    type: 'timeseries',
                    tick: {
                        format: '%Y-%m-%d'
                    }
                },
                y: {
                    label: yLabelValue,
                    tick: {
                        format: function (d) {
                            return Math.round(d * 10000) / 10000;
                        }
                    }
                }
            },
            grid: {
                y: {
                    lines: [{ value: 0, class: 'zero-line', label: '0'}],
                }
            }

        });

        // Set click listener on chart option buttons
        $('#chart-options button').on('click', function (e) {
            switch (this.name) {
                case "value":
                    cols = colsValue;
                    yLabel = yLabelValue;
                    break;
                case "difference":
                    cols = colsDifference;
                    yLabel = yLabelDifference;
                    break;
            }


            chart.axis.labels({ y: yLabel });
            chart.load({
                columns: cols
            });
        });
    }

    function formatDate(date) {
        var d = new Date(date);
        var out = "";
        out += d.getFullYear() + "-";
        out += twoDigits(d.getMonth() + 1) + "-";
        out += twoDigits(d.getDate());
        return out;
    }

    function twoDigits(inn) {
        if (inn.toString().length <= 1) {
            return "0" + inn;
        }
        return inn;
    }

    function copy2DeepArr(arrIn, arrOut) {
        for (i = 0; i < arrIn.length; i++) {
            arrOut[i] = arrIn[i].slice();
        }
    }
</script>
