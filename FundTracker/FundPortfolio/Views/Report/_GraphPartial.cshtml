@model Common.Models.Report


@Styles.Render("~/Content/c3.css")
<script src="/Scripts/d3.min.js" charset="utf-8"></script>
<script src="/Scripts/c3.min.js"></script>


<div id="graph-section">
    @{
		if (ViewBag.GraphOptions)
		{

			<label class="left indent-left">Chart Display Type By: &nbsp;&nbsp;</label>
			<div class="btn-group" data-toggle="buttons">
				<label class="btn btn-default active">
					<input type="radio" name="chart-options" id="value" autocomplete="off" checked> Value
				</label>
				<label class="btn btn-default">
					<input type="radio" name="chart-options" id="difference" autocomplete="off">Change since Start Date
				</label>
			</div>
            <br />
		}
    }
    
    <div id="chart"></div>
    <div id="chartPredictionNote" class="right" style="display:none;">* Highlighted area depicts predicted values</div>
    <br />
</div>

<script>
    var model = @Html.Raw(Json.Encode(Model));

    // Should we show the prediction note?
    // Set whether we will highlight a predicted region on graph as well.
    var predictedRegion = [];
    if (new Date() < new Date(model.Data[0][0])) {
        $('#chartPredictionNote').show();
        predictedRegion = [ {start: formatDate(new Date())} ];
    }

    /* create graph */

    // Vars that the graph uses
    var columnData = [];
    var yLabel;

    // Temp vars
    var i, j;
    var cols = model.Headers.length;
    var rows = model.Data[0].length;
    var num;

    // Set the titles for the columns (for all types)
    for (i = 0; i < cols; i++) {
        columnData[i] = [model.Headers[i]];
    }

    // Set the initial row data (for all types)
    for (i = 0; i < cols; i++) {
        columnData[i] = columnData[i].concat(model.Data[i]);
    }

    // Format the dates
    for (i = 0; i < rows; i++) {
        columnData[0][i + 1] = formatDate(columnData[0][i + 1]);
    }

    // Specific Data for each Graph type
    var yLabelValue = "Fund Price ($)";
    var columnDataValue = [];
    copy2DeepArr(columnData, columnDataValue);
    var yLabelDifference = "Fund Price Change ($)";
    var columnDataDifference = [];
    copy2DeepArr(columnData, columnDataDifference);

    // Generate all the type specific data
    for (i = 1; i < model.Headers.length; i++) {

        // VALUE type
        // default, done.

        // DIFFERENCE Type
        var first = null;
        for (j = rows - 1; j >= 0; j--) {
            num = model.Data[i][j];

            if ($.isNumeric(num)) {
                if (first == null) {
                    first = num;
                    columnDataDifference[i][j + 1] = 0;
                } else {
                    columnDataDifference[i][j + 1] = Math.round((num - first) * 10000) / 10000;
                }
            } else {
                columnDataDifference[i][j + 1] = null;
            }
        }
    }

    /* generate initial graph to show VALUE Type */
    var chart = c3.generate({
        bindto: '#chart',
        data: {
            x: 'Date',
            columns: columnDataValue
        },
        axis: {
            x: {
                type: 'timeseries',
                tick: {
                    format: '%Y-%m-%d'
                }
            },
            y: {
                label: yLabelValue,
                tick: {
                    format: function (d) {
                        return Math.round(d * 10000) / 10000;
                    }
                }
            }
        },
        grid: {
            y: {
                lines: [{ value: 0, class: 'zero-line', label: '0' }],
            }
        },
        regions: predictedRegion

    });

	// Set click listener on chart option buttons
    $(document.getElementsByName("chart-options")).on('change', function (e) {
    	switch (this.id) {
    		case "value":
    			columnData = columnDataValue;
    			yLabel = yLabelValue;
    			break;
    		case "difference":
    			columnData = columnDataDifference;
    			yLabel = yLabelDifference;
    			break;
    	}


    	chart.axis.labels({ y: yLabel });
    	chart.load({
    		columns: columnData
    	});
    });

    function formatDate(date) {
        var d = new Date(date);
        var out = "";
        out += d.getFullYear() + "-";
        out += twoDigits(d.getMonth() + 1) + "-";
        out += twoDigits(d.getDate());
        return out;
    }

    function twoDigits(inn) {
        if (inn.toString().length <= 1) {
            return "0" + inn;
        }
        return inn;
    }

    function copy2DeepArr(arrIn, arrOut) {
        for (i = 0; i < arrIn.length; i++) {
            arrOut[i] = arrIn[i].slice();
        }
    }
</script>